# Svelte

* Pages

-> In Svelte, pages are identified by nomenclature "+page.svelte"
-> The route are identified by the directory name. The file +page.svelte inside a directory named "hello"
  -> will be accessed in navigator by the route url/hello
-> Using a directory with [name], the name will be considered as a parameter, similar to dynamic routes in Next.js
-> To load data inside a page, it's possible to use the import type { PageData } from "./$types" in +page.svelte file
  -> Necessary to export a variable of type PageData
  -> It will load the returned data from a function load({ params }: LoadEvent) {} exported on the +page.ts file inside the same route

# Config

-> The basic HTML structure can be accessed or edited in the file app.html inside src directory
-> The static folder can be used to save all static files, like json, videos or images

# Structure and Concepts

-> The .svelte file will have all code, what includes html, js (ts) and css codes
-> To use JavaScript codes, use <script></script> tag, and for styles, <style></style> like pure html files
-> By default, the style are scoped. This means that by default they will only affect the tags of the file itself
-> It's possible to add global styles using a <style></style> tag in app.html
-> It's possible too use global styles with :global() notation

# Global States (Svelte Stores)

-> To manage Global states like contextApi on React, in Svelte, we use the Store concept
-> It is necessary to import { writable } or { readable } from 'svelte/store' to use this
  -> Writable: allows the user to change his value
  -> Readable: allows the user to access the value, but not changing him
-> To see how declare and use, consult file: ./src/stores/notes.ts

# Directives

-> To use directives on Svelte, just use on:eventname, bind:variable, use:action etc.
-> To prevent the event default action, it's possible to use just a pipe with the event indication
  -> like: <tag on:click|preventDefault
-> It is possible to use other event modifiers, like stopPropagation, once, self etc.
  -> https://svelte.dev/docs/element-directives#on-eventname
-> To bind a variable value and turn it an updatable state, use the directive bind:value={variable}

# Iterations

-> To use iterations like the map method of array in React or for in Vite, use the #each key
  -> Structure: { #each array as item (key) } ... { /each }

# Error Handling

-> To throw Svelte errors, import { error } from @sveltejs/kit and throw error(status, message) in the code if it's necessary
-> To configure how error are exposed to user, create and configure a +error.svelte file inside the route directory
